import tkinter as tk
from tkinter import messagebox

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Lista de Tareas")
        self.root.geometry("400x400")
        self.root.resizable(False, False)

        # ===== Campo de entrada =====
        self.task_entry = tk.Entry(self.root, width=40)
        self.task_entry.pack(pady=10)
        self.task_entry.bind("<Return>", self.add_task)  # Presionar Enter agrega tarea

        # ===== Botones =====
        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=5)

        tk.Button(btn_frame, text="Añadir Tarea", command=self.add_task).grid(row=0, column=0, padx=5)
        tk.Button(btn_frame, text="Marcar como Completada", command=self.mark_completed).grid(row=0, column=1, padx=5)
        tk.Button(btn_frame, text="Eliminar Tarea", command=self.delete_task).grid(row=0, column=2, padx=5)

        # ===== Lista de tareas =====
        self.tasks_listbox = tk.Listbox(self.root, width=50, height=15, selectmode=tk.SINGLE)
        self.tasks_listbox.pack(pady=10)
        self.tasks_listbox.bind("<Double-Button-1>", self.mark_completed)  # Doble clic marca completada

        # Diccionario para almacenar estado de cada tarea
        self.tasks_status = {}

    def add_task(self, event=None):
        task = self.task_entry.get().strip()
        if task:
            self.tasks_listbox.insert(tk.END, task)
            self.tasks_status[task] = False  # False = no completada
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Entrada Vacía", "Por favor, escribe una tarea antes de añadirla.")

    def mark_completed(self, event=None):
        try:
            index = self.tasks_listbox.curselection()[0]
            task = self.tasks_listbox.get(index)

            # Alternar estado
            self.tasks_status[task] = not self.tasks_status[task]

            # Actualizar visual (tachado o normal)
            if self.tasks_status[task]:
                self.tasks_listbox.delete(index)
                self.tasks_listbox.insert(index, f"✔ {task}")
                self.tasks_listbox.itemconfig(index, {'fg': 'gray'})
            else:
                # Quitar el ✔ y el estilo
                clean_task = task.replace("✔ ", "")
                self.tasks_listbox.delete(index)
                self.tasks_listbox.insert(index, clean_task)
                self.tasks_listbox.itemconfig(index, {'fg': 'black'})
        except IndexError:
            messagebox.showinfo("Sin selección", "Selecciona una tarea para marcarla.")

    def delete_task(self):
        try:
            index = self.tasks_listbox.curselection()[0]
            task = self.tasks_listbox.get(index).replace("✔ ", "")
            self.tasks_listbox.delete(index)
            self.tasks_status.pop(task, None)
        except IndexError:
            messagebox.showinfo("Sin selección", "Selecciona una tarea para eliminarla.")

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
